{"version":3,"file":"http.client.js","sourceRoot":"","sources":["../../../../../../../packages/theme/src/services/http/http.client.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpClient,\r\n  HttpHeaders,\r\n  HttpParams,\r\n  HttpResponse,\r\n} from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { tap, catchError } from 'rxjs/operators';\r\nimport { AlainThemeConfig } from '../../theme.config';\r\nimport { HttpClientConfig } from './http.config';\r\n\r\n/**\r\n * 封装HttpClient，主要解决：\r\n * + 优化HttpClient在参数上便利性\r\n * + 统一实现 loading\r\n * + 统一处理时间格式问题\r\n */\r\n@Injectable({ providedIn: 'root' })\r\n// tslint:disable-next-line:class-name\r\nexport class _HttpClient {\r\n  private cog: HttpClientConfig;\r\n  constructor(private http: HttpClient, cog: AlainThemeConfig) {\r\n    this.cog = Object.assign(\r\n      <HttpClientConfig>{\r\n        nullValueHandling: 'include',\r\n        dateValueHandling: 'timestamp',\r\n      },\r\n      cog!.http,\r\n    );\r\n  }\r\n\r\n  private _loading = false;\r\n\r\n  /** 是否正在加载中 */\r\n  get loading(): boolean {\r\n    return this._loading;\r\n  }\r\n\r\n  parseParams(params: any): HttpParams {\r\n    const newParams = {};\r\n    Object.keys(params).forEach(key => {\r\n      let _data = params[key];\r\n      // 忽略空值\r\n      if (this.cog.nullValueHandling === 'ignore' && _data == null) return;\r\n      // 将时间转化为：时间戳 (秒)\r\n      if (this.cog.dateValueHandling === 'timestamp' && _data instanceof Date) {\r\n        _data = _data.valueOf();\r\n      }\r\n      newParams[key] = _data;\r\n    });\r\n    return new HttpParams({ fromObject: newParams });\r\n  }\r\n\r\n  appliedUrl(url: string, params?: any) {\r\n    if (!params) return url;\r\n    url += ~url.indexOf('?') ? '' : '?';\r\n    const arr: string[] = [];\r\n    // tslint:disable-next-line:forin\r\n    for (const key in params) {\r\n      arr.push(`${key}=${params[key]}`);\r\n    }\r\n    return url + arr.join('&');\r\n  }\r\n\r\n  begin() {\r\n    // console.time('http');\r\n    setTimeout(() => (this._loading = true));\r\n  }\r\n\r\n  end() {\r\n    // console.timeEnd('http');\r\n    setTimeout(() => (this._loading = false));\r\n  }\r\n\r\n  // region: get\r\n\r\n  /**\r\n   * GET：返回一个 `T` 类型\r\n   */\r\n  get<T>(\r\n    url: string,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body';\r\n      reportProgress?: boolean;\r\n      responseType: 'json';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<T>;\r\n\r\n  /**\r\n   * GET：返回一个 `string` 类型\r\n   */\r\n  get(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body';\r\n      reportProgress?: boolean;\r\n      responseType: 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * GET：返回一个 `JSON` 类型\r\n   */\r\n  get(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'json';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * GET：返回一个 `JSON` 类型\r\n   */\r\n  get<T>(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'json';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<HttpResponse<T>>;\r\n\r\n  /**\r\n   * GET：返回一个 `any` 类型\r\n   */\r\n  get(\r\n    url: string,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body' | 'events' | 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * GET 请求\r\n   */\r\n  get(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body' | 'events' | 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<any> {\r\n    return this.request(\r\n      'GET',\r\n      url,\r\n      Object.assign(\r\n        {\r\n          params,\r\n        },\r\n        options,\r\n      ),\r\n    );\r\n  }\r\n\r\n  // endregion\r\n\r\n  // region: post\r\n\r\n  /**\r\n   * POST：返回一个 `string` 类型\r\n   */\r\n  post(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body';\r\n      reportProgress?: boolean;\r\n      responseType: 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * POST：返回一个 `HttpResponse<JSON>` 类型\r\n   */\r\n  post(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'json';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * POST：返回一个 `JSON` 类型\r\n   */\r\n  post<T>(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'json';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<T>;\r\n\r\n  /**\r\n   * POST：返回一个 `any` 类型\r\n   */\r\n  post(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body' | 'events' | 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * POST 请求\r\n   */\r\n  post(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body' | 'events' | 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<any> {\r\n    return this.request(\r\n      'POST',\r\n      url,\r\n      Object.assign(\r\n        {\r\n          body,\r\n          params,\r\n        },\r\n        options,\r\n      ),\r\n    );\r\n  }\r\n\r\n  // endregion\r\n\r\n  // region: delete\r\n\r\n  /**\r\n   * DELETE：返回一个 `string` 类型\r\n   */\r\n  delete(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body';\r\n      reportProgress?: boolean;\r\n      responseType: 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * DELETE：返回一个 `JSON` 类型\r\n   */\r\n  delete(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'json';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * DELETE：返回一个 `any` 类型\r\n   */\r\n  delete(\r\n    url: string,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body' | 'events' | 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * DELETE 请求\r\n   */\r\n  delete(\r\n    url: string,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body' | 'events' | 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<any> {\r\n    return this.request(\r\n      'DELETE',\r\n      url,\r\n      Object.assign(\r\n        {\r\n          params,\r\n        },\r\n        options,\r\n      ),\r\n    );\r\n  }\r\n\r\n  // endregion\r\n\r\n  /**\r\n   * `jsonp` 请求\r\n   *\r\n   * @param url URL地址\r\n   * @param params 请求参数\r\n   * @param callbackParam CALLBACK值，默认：JSONP_CALLBACK\r\n   */\r\n  jsonp(\r\n    url: string,\r\n    params?: any,\r\n    callbackParam: string = 'JSONP_CALLBACK',\r\n  ): Observable<any> {\r\n    return this.http.jsonp(this.appliedUrl(url, params), callbackParam).pipe(\r\n      tap(() => {\r\n        this.end();\r\n      }),\r\n      catchError(res => {\r\n        this.end();\r\n        return throwError(res);\r\n      }),\r\n    );\r\n  }\r\n\r\n  // #region patch\r\n\r\n  /**\r\n   * PATCH：返回一个 `string` 类型\r\n   */\r\n  patch(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body';\r\n      reportProgress?: boolean;\r\n      responseType: 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * PATCH：返回一个 `HttpResponse<JSON>` 类型\r\n   */\r\n  patch(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'json';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * PATCH：返回一个 `JSON` 类型\r\n   */\r\n  patch<T>(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'json';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<T>;\r\n\r\n  /**\r\n   * PATCH：返回一个 `any` 类型\r\n   */\r\n  patch(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body' | 'events' | 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * PATCH 请求\r\n   */\r\n  patch(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body' | 'events' | 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<any> {\r\n    return this.request(\r\n      'PATCH',\r\n      url,\r\n      Object.assign(\r\n        {\r\n          body,\r\n          params,\r\n        },\r\n        options,\r\n      ),\r\n    );\r\n  }\r\n\r\n  // #endregion\r\n\r\n  // #region put\r\n\r\n  /**\r\n   * PUT：返回一个 `string` 类型\r\n   */\r\n  put(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body';\r\n      reportProgress?: boolean;\r\n      responseType: 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<string>;\r\n\r\n  /**\r\n   * PUT：返回一个 `HttpResponse<JSON>` 类型\r\n   */\r\n  put(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'json';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<HttpResponse<Object>>;\r\n\r\n  /**\r\n   * PUT：返回一个 `JSON` 类型\r\n   */\r\n  put<T>(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe: 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'json';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<T>;\r\n\r\n  /**\r\n   * PUT：返回一个 `any` 类型\r\n   */\r\n  put(\r\n    url: string,\r\n    body?: any,\r\n    params?: any,\r\n    options?: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body' | 'events' | 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<any>;\r\n\r\n  /**\r\n   * PUT 请求\r\n   */\r\n  put(\r\n    url: string,\r\n    body: any,\r\n    params: any,\r\n    options: {\r\n      headers?: HttpHeaders | { [header: string]: string | string[] };\r\n      observe?: 'body' | 'events' | 'response';\r\n      reportProgress?: boolean;\r\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<any> {\r\n    return this.request(\r\n      'PUT',\r\n      url,\r\n      Object.assign(\r\n        {\r\n          body,\r\n          params,\r\n        },\r\n        options,\r\n      ),\r\n    );\r\n  }\r\n\r\n  // #endregion\r\n\r\n  /**\r\n   * `request` 请求\r\n   *\r\n   * @param method 请求方法类型\r\n   * @param url URL地址\r\n   * @param options 参数\r\n   */\r\n  request<R>(\r\n    method: string,\r\n    url: string,\r\n    options?: {\r\n      body?: any;\r\n      headers?:\r\n        | HttpHeaders\r\n        | {\r\n            [header: string]: string | string[];\r\n          };\r\n      observe?: 'body' | 'events' | 'response';\r\n      params?:\r\n        | HttpParams\r\n        | {\r\n            [param: string]: string | string[];\r\n          };\r\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n      reportProgress?: boolean;\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<R>;\r\n  /**\r\n   * `request` 请求\r\n   *\r\n   * @param method 请求方法类型\r\n   * @param url URL地址\r\n   * @param options 参数\r\n   */\r\n  request(\r\n    method: string,\r\n    url: string,\r\n    options?: {\r\n      body?: any;\r\n      headers?:\r\n        | HttpHeaders\r\n        | {\r\n            [header: string]: string | string[];\r\n          };\r\n      observe?: 'body' | 'events' | 'response';\r\n      params?:\r\n        | HttpParams\r\n        | {\r\n            [param: string]: string | string[];\r\n          };\r\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text';\r\n      reportProgress?: boolean;\r\n      withCredentials?: boolean;\r\n    },\r\n  ): Observable<any> {\r\n    this.begin();\r\n    if (options) {\r\n      if (options.params) options.params = this.parseParams(options.params);\r\n    }\r\n    return this.http.request(method, url, options).pipe(\r\n      tap(() => {\r\n        this.end();\r\n      }),\r\n      catchError(res => {\r\n        this.end();\r\n        return throwError(res);\r\n      }),\r\n    );\r\n  }\r\n}\r\n"]}